# TacToe: Tic-Tac-Toe with AI
# Created by Gagan

def create_board():
    return [[" "]*3 for _ in range(3)]

def print_board(board):
    print("\n".join([" | ".join(row) for row in board]))
    print()

def check_win(board, player):
    return any(all(cell == player for cell in row) for row in board) or \
           any(all(board[r][c] == player for r in range(3)) for c in range(3)) or \
           all(board[i][i] == player for i in range(3)) or \
           all(board[i][2 - i] == player for i in range(3))

def get_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == " "]

def minimax(board, is_ai):
    if check_win(board, "O"): return 1
    if check_win(board, "X"): return -1
    if not get_moves(board): return 0

    scores = []
    for r, c in get_moves(board):
        board[r][c] = "O" if is_ai else "X"
        score = minimax(board, not is_ai)
        board[r][c] = " "
        scores.append(score)

    return max(scores) if is_ai else min(scores)

def best_move(board):
    best_score = -float('inf')
    move = None
    for r, c in get_moves(board):
        board[r][c] = "O"
        score = minimax(board, False)
        board[r][c] = " "
        if score > best_score:
            best_score = score
            move = (r, c)
    return move

# Game Loop
board = create_board()
print("Welcome to TacToe! You're X, AI is O.")
print_board(board)

while True:
    r, c = map(int, input("Enter your move (row col): ").split())
    if board[r][c] != " ":
        print("❌ Invalid move. Try again.")
        continue

    board[r][c] = "X"
    print_board(board)

    if check_win(board, "X"):
        print("🎉 You win!")
        break
    if not get_moves(board):
        print("🤝 It's a draw.")
        break

    ai_r, ai_c = best_move(board)
    board[ai_r][ai_c] = "O"
    print("AI played:")
    print_board(board)

    if check_win(board, "O"):
        print("😈 AI wins! Better luck next time.")
        break
